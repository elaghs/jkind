package jkind.api.examples.coverage;

import static java.util.stream.Collectors.toMap;

import java.util.HashMap;
import java.util.Map;

import jkind.lustre.ArrayAccessExpr;
import jkind.lustre.ArrayExpr;
import jkind.lustre.ArrayUpdateExpr;
import jkind.lustre.BinaryExpr;
import jkind.lustre.BinaryOp;
import jkind.lustre.BoolExpr;
import jkind.lustre.CastExpr;
import jkind.lustre.CondactExpr;
import jkind.lustre.Equation;
import jkind.lustre.Expr;
import jkind.lustre.IdExpr;
import jkind.lustre.IfThenElseExpr;
import jkind.lustre.IntExpr;
import jkind.lustre.Node;
import jkind.lustre.NodeCallExpr;
import jkind.lustre.RealExpr;
import jkind.lustre.RecordAccessExpr;
import jkind.lustre.RecordExpr;
import jkind.lustre.RecordUpdateExpr;
import jkind.lustre.TupleExpr;
import jkind.lustre.Type;
import jkind.lustre.UnaryExpr;
import jkind.lustre.UnaryOp;
import jkind.lustre.visitors.ExprIterVisitor;
import jkind.util.Util;

/**
 * After extracting out subexpressions, some variables will be given int type
 * but need a more specific subrange in order to type check. This pass flows
 * type information downward to fix these problems. This doesn't handle every
 * possibility, but it does handle the way subranges are actually generated by
 * Gryphon.
 */
public class MarkSubrangesVisitor extends ExprIterVisitor {
	private Map<String, Type> env;
	private Map<String, Expr> equations = new HashMap<>();
	private Type expectedType;

	public Map<String, Type> mark(Node e) {
		env = Util.getVarDecls(e).stream().collect(toMap(vd -> vd.id, vd -> vd.type));

		for (Equation eq : e.equations) {
			equations.put(eq.lhs.get(0).id, eq.expr);
		}

		for (Equation eq : e.equations) {
			IdExpr lhs = eq.lhs.get(0);
			if (!isExtractedVariable(lhs)) {
				expectedType = env.get(lhs.id);
				eq.expr.accept(this);
			}
		}

		return env;
	}

	@Override
	public Void visit(ArrayAccessExpr e) {
		return null;
	}

	@Override
	public Void visit(ArrayExpr e) {
		return null;
	}

	@Override
	public Void visit(ArrayUpdateExpr e) {
		return null;
	}

	@Override
	public Void visit(BinaryExpr e) {
		if (e.op == BinaryOp.ARROW) {
			e.left.accept(this);
			e.right.accept(this);
		}
		return null;
	}

	@Override
	public Void visit(BoolExpr e) {
		return null;
	}

	@Override
	public Void visit(CastExpr e) {
		return null;
	}

	@Override
	public Void visit(CondactExpr e) {
		return null;
	}

	@Override
	public Void visit(IdExpr e) {
		if (isExtractedVariable(e)) {
			env.put(e.id, expectedType);
			equations.get(e.id).accept(this);
		}
		return null;
	}

	@Override
	public Void visit(IfThenElseExpr e) {
		e.thenExpr.accept(this);
		e.elseExpr.accept(this);
		return null;
	}

	@Override
	public Void visit(IntExpr e) {
		return null;
	}

	@Override
	public Void visit(NodeCallExpr e) {
		return null;
	}

	@Override
	public Void visit(RealExpr e) {
		return null;
	}

	@Override
	public Void visit(RecordAccessExpr e) {
		return null;
	}

	@Override
	public Void visit(RecordExpr e) {
		return null;
	}

	@Override
	public Void visit(RecordUpdateExpr e) {
		return null;
	}

	@Override
	public Void visit(TupleExpr e) {
		return null;
	}

	@Override
	public Void visit(UnaryExpr e) {
		if (e.op == UnaryOp.PRE) {
			e.expr.accept(this);
		}
		return null;
	}

	public boolean isExtractedVariable(IdExpr e) {
		return e.id.startsWith(ExtractorVisitor.PREFIX);
	}
}
